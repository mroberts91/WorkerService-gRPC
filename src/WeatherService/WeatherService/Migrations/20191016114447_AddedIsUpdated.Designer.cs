// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherService.Data;

namespace WeatherService.Migrations
{
    [DbContext(typeof(WeatherContext))]
    [Migration("20191016114447_AddedIsUpdated")]
    partial class AddedIsUpdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("WeatherService.Data.Models.City", b =>
                {
                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("CityName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ConditionsID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountyName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Lattitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("StateAbbr")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<long?>("WeatherID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ZipCode");

                    b.HasIndex("ConditionsID");

                    b.HasIndex("WeatherID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("WeatherService.Data.Models.Conditions", b =>
                {
                    b.Property<long>("ConditionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RainID")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SnowID")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("WindID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConditionsID");

                    b.HasIndex("RainID");

                    b.HasIndex("SnowID");

                    b.HasIndex("WindID");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("WeatherService.Data.Models.Rain", b =>
                {
                    b.Property<long>("RainID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("OneHourRainfall")
                        .HasColumnType("REAL");

                    b.Property<double?>("ThreeHourRainfall")
                        .HasColumnType("REAL");

                    b.HasKey("RainID");

                    b.ToTable("Rain");
                });

            modelBuilder.Entity("WeatherService.Data.Models.Snow", b =>
                {
                    b.Property<long>("SnowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("OneHourSnowfall")
                        .HasColumnType("REAL");

                    b.Property<double?>("ThreeHourSnowfall")
                        .HasColumnType("REAL");

                    b.HasKey("SnowID");

                    b.ToTable("Snow");
                });

            modelBuilder.Entity("WeatherService.Data.Models.Weather", b =>
                {
                    b.Property<long>("WeatherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<double?>("Pressure")
                        .HasColumnType("REAL");

                    b.Property<double?>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<double?>("Visibility")
                        .HasColumnType("REAL");

                    b.HasKey("WeatherID");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("WeatherService.Data.Models.Wind", b =>
                {
                    b.Property<long>("WindID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Speed")
                        .HasColumnType("REAL");

                    b.HasKey("WindID");

                    b.ToTable("Wind");
                });

            modelBuilder.Entity("WeatherService.Data.Models.City", b =>
                {
                    b.HasOne("WeatherService.Data.Models.Conditions", "Conditions")
                        .WithMany()
                        .HasForeignKey("ConditionsID");

                    b.HasOne("WeatherService.Data.Models.Weather", "Weather")
                        .WithMany()
                        .HasForeignKey("WeatherID");
                });

            modelBuilder.Entity("WeatherService.Data.Models.Conditions", b =>
                {
                    b.HasOne("WeatherService.Data.Models.Rain", "Rain")
                        .WithMany()
                        .HasForeignKey("RainID");

                    b.HasOne("WeatherService.Data.Models.Snow", "Snow")
                        .WithMany()
                        .HasForeignKey("SnowID");

                    b.HasOne("WeatherService.Data.Models.Wind", "Wind")
                        .WithMany()
                        .HasForeignKey("WindID");
                });
#pragma warning restore 612, 618
        }
    }
}
